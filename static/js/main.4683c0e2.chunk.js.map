{"version":3,"sources":["Components/Test/Test.js","Components/Gallery/Gallery.js","Components/ApiCall/ApiCall.js","Components/Home/Home.js","Components/Login/Login.js","Components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["Test","props","state","Button","React","Gallery","ApiCall","className","Home","Login","htmlFor","type","id","placeholder","required","autoFocus","value","NavigationBar","to","href","aria-controls","aria-expanded","aria-label","path","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4683c0e2.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nclass Test extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Button>Test</Button>\n                <div>\n                    <p>Hello World!</p>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Test;\n","import * as React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nclass Gallery extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Button>Gallery</Button>\n                <div>\n                    <p>Hello World!</p>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Gallery;\n","import * as React from \"react\";\n\nclass ApiCall extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"jumbotron\">\n                    <p>Hello World!</p>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ApiCall;\n","import * as React from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nclass   Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Button>Home</Button>\n                <div>\n                    <p>Hello World!</p>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Home;\n","import * as React from \"react\";\nimport \"./Login.css\";\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"container\">\n                    <form className=\"form-signin\">\n                        <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n                        <label htmlFor=\"inputEmail\" className=\"sr-only\">Email address</label>\n                        <input type=\"email\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email address\"\n                               required autoFocus/>\n                        <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\n                        <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\"\n                               required/>\n                        <div className=\"checkbox mb-3\">\n                            <label>\n                                <input type=\"checkbox\" value=\"remember-me\"/>\n                                Remember me\n                            </label>\n                        </div>\n                        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\n                        <p className=\"mt-5 mb-3 text-muted\">&copy; All Right Reserved | Saurav Bhandari</p>\n                    </form>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Login;\n","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport Test from \"./Test/Test\";\nimport Gallery from \"./Gallery/Gallery\";\nimport ApiCall from \"./ApiCall/ApiCall\";\nimport Home from \"./Home/Home\";\nimport Login from \"./Login/Login\";\n\n\nclass NavigationBar extends React.Component {\n\n    render() {\n        return (\n            <Router>\n                <div className=\"container-fluid\">\n                    <nav className=\"navbar navbar-dark navbar-expand bg-dark \">\n                        <Link to=\"/\" className=\"navbar-brand\" href=\"#\">Gallery</Link>\n                        <button className=\"navbar-toggler\" type=\"button\"\n                                aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\"\n                                aria-label=\"Toggle navigation\">\n                            <span className=\"navbar-toggler-icon\"/>\n                        </button>\n\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                            <ul className=\"navbar-nav mr-auto\">\n                                <li className=\"nav-item active\">\n                                    <Link to=\"/\" className=\"nav-link\">Home <span\n                                        className=\"sr-only\">(current)</span>\n                                    </Link>\n                                </li>\n\n                                <li className=\"nav-item\">\n                                    <Link to=\"/test\" className=\"nav-link\">Test Component</Link>\n                                </li>\n\n                                <li className=\"nav-item\">\n                                    <Link to=\"/gallery\" className=\"nav-link\">View Gallery</Link>\n                                </li>\n\n                                <li className=\"nav-item\">\n                                    <Link to=\"/api-call\" className=\"nav-link\">5000 Images</Link>\n                                </li>\n\n                                <li className=\"nav-item\">\n                                    <Link to=\"/login\" className=\"nav-link\">Login</Link>\n                                </li>\n\n                            </ul>\n                            <div className=\"form-inline my-2 my-lg-0\">\n                                <Link to=\"/login\">\n                                    <button className=\"btn btn-outline-success my-2 my-sm-0\">User Login</button>\n                                </Link>\n                            </div>\n                        </div>\n                    </nav>\n                </div>\n                <Switch>\n                    <Route path=\"/test\">\n                        <Test/>\n                    </Route>\n                    <Route path=\"/gallery\">\n                        <Gallery/>\n                    </Route>\n                    <Route path=\"/api-call\">\n                        <ApiCall/>\n                    </Route>\n                    <Route path=\"/login\">\n                        <Login/>\n                    </Route>\n                    <Route path=\"/\">\n                        <Home/>\n                    </Route>\n\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default NavigationBar;\n","import React from 'react';\nimport './App.css';\nimport NavigationBar from \"./Components/NavigationBar\";\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <NavigationBar/>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}